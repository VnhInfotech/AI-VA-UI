import React, { useState, useEffect } from "react";
import { useSearchParams } from "react-router-dom";
import Layout from "../components/Layout";
import { useNavigate } from "react-router-dom";
import ImagePostDTO from "../utils/ImagePostDTO";
import { searchImages } from "../utils/pixabay";

const shimmerStyles = `
.shimmer-box {
  position: relative;
  width: 100%;
  aspect-ratio: 1 / 1;
  border-radius: 12px;
  border: 2px solid white;
  overflow: hidden;
  background: linear-gradient(
    135deg,
    #f5f5f5 40%,               
    rgba(255,255,255,0.6) 50%,
    #f5f5f5 60% 
  );
  background-size: 400% 400%;
  animation: diagonalShimmer 8s ease-in-out infinite;
}

@keyframes diagonalShimmer {
  0% {
    background-position: 100% 100%;
  }
  50% {
    background-position: 0% 0%;
  }
  100% {
    background-position: 100% 100%;
  }
}
`;

const Search = () => {
    const navigate = useNavigate();
    const [searchParams] = useSearchParams();
    const rawQuery = searchParams.get("q");
    const query = rawQuery && rawQuery.trim() !== "" ? rawQuery.trim() : null;

    // fallback stock image keyword if no search yet
    const stockQuery = query || "nature";
    const [images, setImages] = useState([]);
    const [captions, setCaptions] = useState([]);
    const [isLoadingCaptions, setIsLoadingCaptions] = useState(false);
    const [selectedImage, setSelectedImage] = useState(null);
    const [selectedTemplate, setSelectedTemplate] = useState(null);
    const [imageSize, setImageSize] = useState("1:1");
    const [templateText, setTemplateText] = useState(
        `Honoring Two Legends\n\n🔷 Truth & Non-Violence – Mahatma Gandhi\n🔷 Strength & Simplicity – Lal Bahadur Shastri\n\nLet’s follow their ideals for a stronger, united India!\n\n🇮🇳 Happy Gandhi & Shastri Jayanti! 🇮🇳`
    );

    useEffect(() => {
        setImages([]);
        setCaptions([]);
        setSelectedImage(null);
        setSelectedTemplate(null);
        setTemplateText("");
    }, [query]);

    useEffect(() => {
        const style = document.createElement("style");
        style.innerHTML = shimmerStyles;
        document.head.appendChild(style);
        return () => {
            document.head.removeChild(style);
        };
    }, []);

    const [isLoadingAI, setIsLoadingAI] = useState(false);
    useEffect(() => {
        const fetchStockImages = async () => {
            try {
                const stockImages = await searchImages(stockQuery);
                setImages(stockImages);
            } catch (err) {
                console.error("Error fetching stock images:", err);
            }
        };

        const fetchVertexImages = async () => {
            if (!query) return;

            try {
                setIsLoadingAI(true);
                const res = await fetch("http://localhost:5000/api/images/generate-image-async", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        prompt: query
                        // sampleCount: 3, // default or customize as needed
                        // aspectRatio: imageSize,
                    }),
                });

                const data = await res.json();
                const requestId = data.requestId;
                if (!requestId) {
                    console.warn("No requestId received");
                    return;
                }

                const pollResult = async (retryCount = 15) => {
                    for (let i = 0; i < retryCount; i++) {
                        await new Promise((r) => setTimeout(r, 2000));

                        const res = await fetch(`http://localhost:5000/api/images/check-image-result/${requestId}`);
                        const result = await res.json();

                        if (Array.isArray(result.imagePaths)) {
                            const vertexImages = result.imagePaths.map((relativePath) => ({
                                url: `http://localhost:5000/${relativePath}`,
                                alt: `Generated by Vertex AI for ${query}`,
                                source: "vertex",
                            }));
                            setImages((prev) => [...prev, ...vertexImages]);
                            return;
                        }

                        if (result.error) {
                            console.warn("Vertex AI error:", result.error);
                            return;
                        }
                    }
                    console.warn("Imagen generation timed out or failed");
                };

                await pollResult();
            } catch (err) {
                console.error("Error fetching Vertex AI images:", err);
            } finally {
                setIsLoadingAI(false);
            }
        };

        const fetchOpenAIImages = async () => {
            if (!query) return;

            try {
                setIsLoadingAI(true);
                const res = await fetch("http://localhost:5000/api/image/generate-dalle-image", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        prompt: query
                        // n: 3, // change this acc to pricing plans
                    }),
                });

                const data = await res.json();

                if (!data || !Array.isArray(data.imageUrls)) {
                    console.warn("No DALL·E images returned");
                    return;
                }

                const dalleImages = data.imageUrls.map((url) => ({
                    url,
                    alt: `Generated by DALL·E for ${query}`, // todo : remove this
                    source: "openai",
                }));

                setImages((prev) => [...prev, ...dalleImages]); // append

            } catch (err) {
                console.error("Error fetching DALL·E images:", err);
            } finally {
                setIsLoadingAI(false); // MODIFIED
            }
        };
        fetchVertexImages();
        fetchOpenAIImages();
        fetchStockImages();
    }, [query, stockQuery, imageSize]);

    // useEffect(() => {
    //     const fetchCaptions = async () => {
    //         const allCaptions = [];
    //         try {
    //             setIsLoadingCaptions(true);
    //             const res = await fetch('http://localhost:5000/api/openai/generate-captions', {
    //                 method: "POST",
    //                 headers: { "Content-Type": "application/json" },
    //                 body: JSON.stringify({ prompt: query }),
    //             });

    //             const data = await res.json();

    //             const cleaned = data.captions
    //                 .filter(caption =>
    //                     caption.trim() &&
    //                     !/^suggested caption/i.test(caption.trim()) &&
    //                     !caption.toLowerCase().includes("certainly")
    //                 )
    //                 .map(caption => caption.trim().replace(/^"+|"+$/g, ""))
    //                 .map(caption => caption.replace(/[\]\[]+$/g, ""));

    //             allCaptions.push(...cleaned.slice(0, 6));
    //             setCaptions(allCaptions);
    //         } catch (err) {
    //             console.error("Caption fetch failed:", err);
    //         } finally {
    //             setIsLoadingCaptions(false);
    //         }
    //     };

    //     if (query) {
    //         // fetchCaptions();
    //         templateText;
    //     }
    // }, [query]);

    useEffect(() => {
  const staticCaptions = [
    `Honoring Two Legends\n\n🔷 Truth & Non-Violence – Mahatma Gandhi\n🔷 Strength & Simplicity – Lal Bahadur Shastri\n\nLet’s follow their ideals for a stronger, united India!\n\n🇮🇳 Happy Gandhi & Shastri Jayanti!`,
    `Celebrating the spirit of leadership and peace 🇮🇳\n\n✊🏽 Gandhi's path of non-violence\n🧘🏽‍♂️ Shastri's strength in simplicity\n\nLet's carry their legacy forward this Gandhi & Shastri Jayanti!`,
    `Two heroes. One nation. One purpose.\n\n🇮🇳 Gandhi – The Father of the Nation\n🇮🇳 Shastri – The Hero of Simplicity\n\nHappy Gandhi & Shastri Jayanti!`,
    `Unity in thoughts. Strength in actions.\n\nLet’s take inspiration from Mahatma Gandhi & Lal Bahadur Shastri to build a peaceful and powerful India.\n\n🌿 Happy Jayanti!`,
    `Walking on the path of peace & simplicity paved by two legends – Gandhi & Shastri.\n\n🇮🇳 Remembering their contributions today and always.`,
    `🇮🇳 October 2nd – A day of inspiration.\n\nLet’s honor Gandhi Ji & Shastri Ji by living their values of truth, unity, and humility.\n\n#GandhiJayanti #ShastriJayanti`
  ];

  setCaptions(staticCaptions);
}, []);


    // split images for divider
    const stockImages = images.filter((img) => img.source === "pexels" || img.source === "pixabay");
    const aiImages = images.filter((img) => img.source === "vertex" || img.source === "openai");
    return (
        <Layout>
            <section className="py-5 w-full flex flex-col items-center">
                <div className="w-11/12 max-w-7xl">
                    <h2 className="text-2xl font-bold text-left mb-4">
                        Showing results for{" "}
                        <span className="text-black">post design for {query}</span>
                    </h2>

                    {/* AI IMAGE SECTION */}
                    {query && (
                        <>
                            <div className="mb-3">
                                <h3 className="text-lg font-semibold mb-3">
                                    {isLoadingAI ? "Please wait while we generate AI Images" : "Choose from AI-generated images"}
                                </h3>
                                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">

                                    {isLoadingAI &&
                                        Array.from({ length: 4 }).map((_, i) => (
                                            <div key={i} className="shimmer-box">
                                                {/* <div className="shimmer-inner"></div> */}
                                            </div>
                                        ))}

                                    {/* AI-generated images */}
                                    {aiImages.map((img, index) => (
                                        <div
                                            key={img.url || index}
                                            onClick={() => setSelectedImage(img.url)}
                                            className={`group relative cursor-pointer border-2 rounded-lg overflow-hidden transition duration-300 shadow-md hover:shadow-lg ${selectedImage === img.url ? "border-[#C731CD]" : "border-transparent"
                                                }`}
                                        >
                                            <div className="w-full bg-white">
                                                <img
                                                    src={img.url}
                                                    alt={img.alt || `Image ${index}`}
                                                    loading="lazy"
                                                    className="w-full h-auto object-contain"
                                                />
                                            </div>
                                            <div className="absolute bottom-1 left-1/2 transform -translate-x-1/2 text-[10px] text-white italic bg-black/40 px-2 py-[1px] rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                                                {img.source === "vertex"
                                                    ? "AI Image via Google Vertex"
                                                    : "Generated by OpenAI DALL·E"}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {/* DIVIDER */}
                            {stockImages.length > 0 && <hr className="my-6 border-t-2 border-gray-300" />}
                        </>
                    )}

                    {/* STOCK IMAGE GRID */}
                    <div className="columns-1 sm:columns-2 md:columns-3 gap-4 space-y-4">
                        {stockImages.map((img, index) => (
                            <div
                                key={img.url || index}
                                onClick={() => setSelectedImage(img.url)}
                                className={`group relative cursor-pointer border-2 rounded-lg overflow-hidden transition duration-300 shadow-md hover:shadow-lg ${selectedImage === img.url ? "border-[#C731CD]" : "border-transparent"
                                    }`}
                            >
                                <div className="w-full bg-white">
                                    <img
                                        src={img.url}
                                        alt={img.alt || `Image ${index}`}
                                        loading="lazy"
                                        className="w-full h-auto object-contain"
                                    />
                                </div>
                                <div className="absolute bottom-1 left-1/2 transform -translate-x-1/2 text-[10px] text-white italic bg-black/40 px-2 py-[1px] rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                                    {img.source === "pexels"
                                        ? `Photo by ${img.photographer || "Photographer"} on Pexels`
                                        : "Image from Pixabay"}
                                </div>
                            </div>
                        ))}
                    </div>

                    {/* Horizontal Divider */}
                    <hr className="my-12 border-t-2 border-gray-300" />

                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
                        {isLoadingCaptions ? (
                            <p className="italic text-gray-500 col-span-full">
                                Please wait while we generate captions for you...
                            </p>
                        ) : (
                            captions.map((caption, index) => (
                                <div
                                    key={index}
                                    onClick={() => {
                                        setSelectedTemplate(index);
                                        setTemplateText(caption);
                                    }}
                                    className={`bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition duration-300 cursor-pointer border-2 ${selectedTemplate === index ? "border-[#C731CD]" : "border-transparent"
                                        }`}
                                >
                                    <h3 className="font-semibold text-lg text-gray-800 mb-2">
                                        Suggested Caption {index + 1}
                                    </h3>
                                    <p className="text-sm text-gray-700 whitespace-pre-wrap break-words">
                                        {caption}
                                    </p>
                                </div>
                            ))
                        )}
                    </div>

                    {/* Selected Items Section */}
                    {selectedImage && selectedTemplate !== null && (
                        <>
                            <h2 className="my-12 text-xl font-bold text-gray-800 mb-4">
                                Would You Like This
                            </h2>

                            <div className="flex flex-col md:flex-row items-start gap-6">
                                <div className="w-full md:w-1/2">
                                    <div className="w-full rounded-lg overflow-hidden border-2 border-[#FFFFFF]">
                                        <img
                                            src={selectedImage}
                                            alt="Selected"
                                            className="w-full h-auto object-contain"
                                        />
                                    </div>
                                </div>

                                <div className="w-full md:w-1/2">
                                    <div className="bg-white p-6 rounded-lg">
                                        <textarea
                                            value={templateText}
                                            onChange={(e) => setTemplateText(e.target.value)}
                                            rows={10}
                                            className="w-full border-none resize-none text-sm text-gray-800 focus:outline-none"
                                        />
                                    </div>

                                    {/* Next Button */}
                                    <button
                                        className="w-full mt-4 px-6 py-3 text-lg font-medium bg-[#C731CD] text-white rounded-lg border-2 border-[#C731CD] transition duration-300 hover:bg-white hover:text-[#C731CD]"
                                        onClick={() => {
                                            const postDTO = new ImagePostDTO({
                                                imageUrl: selectedImage,
                                                caption: templateText,
                                            });
                                            navigate("/search/finalize", { state: { post: postDTO } });
                                        }}
                                    >
                                        Next
                                    </button>
                                </div>
                            </div>
                        </>
                    )}
                </div>
            </section>
        </Layout>
    );
};

export default Search;
